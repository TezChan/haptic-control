#ifndef _HAPTIC_H_INCLUDED_
#define _HAPTIC_H_INCLUDED_

#include "math/CMatrix3d.h"
#include "geometry.h"
#include "cMoveToPoint.h"
#include "cConstrainToPoint.h"
#include "cBoundingPlane.h"
#include "cPlanarObstacle.h"
#include "cPerturbationPulse.h"
#include "cSupportLedge.h"
#include "cDirectionalViscosity.h"
#include "cDirectionalMass.h"
#include "cCurlForceField.h"
#include "cErrorClamp.h"
#include "cCircularBuffer.hpp"
#include "cConstantForceField.h"

//-----------------------------------------------------------------------
// ENVIRONMENT CONSTANTS
//-----------------------------------------------------------------------

// this is the physical orientation of the device relative to its mount
#define HAPTIC_DEVICE_ANGLE_DEG 45.0 // device is angled 45 forward from upright
#define GAIN_HAPTIC_TO_RIG 1000.0 // haptic in meters, rig in mm

// this is the angle with respect to upright of the vertical workspace
#define HAPTIC_WORKSPACE_ANGLE_DEG 0.00

// this must be set correctly for gravity compensation to work correctly
#define HAPTIC_EFFECTOR_MASS 0.38   // Delta 3

// device workspace plane is angled towards screen,relative to screen plane
#define WORKSPACE_WIDTH 250   // default is 250 from Dan
#define WORKSPACE_HEIGHT 250  // default is 200 from Dan

#define HAPTIC_MAX_TARGETS 3
#define HAPTIC_MAX_CONSTRAINTS 2

#define DRAG_COEFF .02

int hapticInitialize();
void hapticConfigureDevice();

void initHapticWorkspace();
void hapticUpdateState();
void hapticInitLabels();


struct HapticState {
    // position and velocity in task coordinates
    cVector3d posRig;
    cVector3d velRig;
    cVector3d accelRig;
    cVector3d totalForce;
    bool hitObstacle;
    bool hitTarget;
    bool atWorkspaceEdge;
    bool onScreenPlane;
    bool hitConstraint;

    // acceleration filter coefficients

//    // SG_filt__sampRate_1k__nTaps_37
//    std::vector<double> accelFiltCoefficients = { 1094.2116205, 911.8430171, 739.8954767, 578.3689994, 427.2635852, 286.5792339, 156.3159458, 36.4737207, -72.9474414, -171.9475404, -260.5265763, -338.6845492, -406.4214591, -463.7373058, -510.6320896, -547.1058103, -573.1584679, -588.7900625, -594.0005940, -588.7900625, -573.1584679, -547.1058103, -510.6320896, -463.7373058, -406.4214591, -338.6845492, -260.5265763, -171.9475404, -72.9474414, 36.4737207, 156.3159458, 286.5792339, 427.2635852, 578.3689994, 739.8954767, 911.8430171, 1094.2116205, };

    // 4kHz filters:
//    // SG_filt__sampRate_4k__nTaps_85
//    std::vector<double> accelFiltCoefficients = { 1509.5051653, 1401.6833678, 1296.4596859, 1193.8341196, 1093.8066689, 996.3773337, 901.5461142, 809.3130103, 719.6780220, 632.6411493, 548.2023922, 466.3617507, 387.1192248, 310.4748146, 236.4285199, 164.9803408, 96.1302773, 29.8783294, -33.7755028, -94.8312195, -153.2888206, -209.1483060, -262.4096759, -313.0729302, -361.1380688, -406.6050919, -449.4739993, -489.7447912, -527.4174674, -562.4920280, -594.9684731, -624.8468025, -652.1270164, -676.8091146, -698.8930972, -718.3789642, -735.2667156, -749.5563515, -761.2478717, -770.3412763, -776.8365653, -780.7337387, -782.0327965, -780.7337387, -776.8365653, -770.3412763, -761.2478717, -749.5563515, -735.2667156, -718.3789642, -698.8930972, -676.8091146, -652.1270164, -624.8468025, -594.9684731, -562.4920280, -527.4174674, -489.7447912, -449.4739993, -406.6050919, -361.1380688, -313.0729302, -262.4096759, -209.1483060, -153.2888206, -94.8312195, -33.7755028, 29.8783294, 96.1302773, 164.9803408, 236.4285199, 310.4748146, 387.1192248, 466.3617507, 548.2023922, 632.6411493, 719.6780220, 809.3130103, 901.5461142, 996.3773337, 1093.8066689, 1193.8341196, 1296.4596859, 1401.6833678, 1509.5051653, };
//    // SG_filt__sampRate_4k__nTaps_125
//    std::vector<double> accelFiltCoefficients = { 479.9400075, 456.7171039, 433.8718085, 411.4041213, 389.3140423, 367.6015714, 346.2667088, 325.3094543, 304.7298081, 284.5277700, 264.7033401, 245.2565184, 226.1873049, 207.4956995, 189.1817024, 171.2453135, 153.6865327, 136.5053601, 119.7017957, 103.2758395, 87.2274915, 71.5567517, 56.2636201, 41.3480966, 26.8101814, 12.6498743, -1.1328246, -14.5379153, -27.5653978, -40.2152721, -52.4875382, -64.3821961, -75.8992459, -87.0386874, -97.8005208, -108.1847460, -118.1913630, -127.8203718, -137.0717724, -145.9455648, -154.4417491, -162.5603251, -170.3012930, -177.6646527, -184.6504041, -191.2585474, -197.4890826, -203.3420095, -208.8173282, -213.9150387, -218.6351411, -222.9776353, -226.9425212, -230.5297990, -233.7394686, -236.5715301, -239.0259833, -241.1028283, -242.8020652, -244.1236938, -245.0677143, -245.6341266, -245.8229307, -245.6341266, -245.0677143, -244.1236938, -242.8020652, -241.1028283, -239.0259833, -236.5715301, -233.7394686, -230.5297990, -226.9425212, -222.9776353, -218.6351411, -213.9150387, -208.8173282, -203.3420095, -197.4890826, -191.2585474, -184.6504041, -177.6646527, -170.3012930, -162.5603251, -154.4417491, -145.9455648, -137.0717724, -127.8203718, -118.1913630, -108.1847460, -97.8005208, -87.0386874, -75.8992459, -64.3821961, -52.4875382, -40.2152721, -27.5653978, -14.5379153, -1.1328246, 12.6498743, 26.8101814, 41.3480966, 56.2636201, 71.5567517, 87.2274915, 103.2758395, 119.7017957, 136.5053601, 153.6865327, 171.2453135, 189.1817024, 207.4956995, 226.1873049, 245.2565184, 264.7033401, 284.5277700, 304.7298081, 325.3094543, 346.2667088, 367.6015714, 389.3140423, 411.4041213, 433.8718085, 456.7171039, 479.9400075, };
//    // SG_filt__sampRate_4k__nTaps_149
//    std::vector<double> accelFiltCoefficients = { 284.4570870, 272.9250429, 261.5498974, 250.3316505, 239.2703021, 228.3658522, 217.6183010, 207.0276482, 196.5938941, 186.3170385, 176.1970815, 166.2340230, 156.4278631, 146.7786017, 137.2862389, 127.9507746, 118.7722090, 109.7505418, 100.8857733, 92.1779033, 83.6269318, 75.2328589, 66.9956846, 58.9154088, 50.9920316, 43.2255529, 35.6159728, 28.1632913, 20.8675083, 13.7286239, 6.7466380, -0.0784493, -6.7466380, -13.2579282, -19.6123198, -25.8098129, -31.8504074, -37.7341034, -43.4609008, -49.0307996, -54.4437999, -59.6999016, -64.7991048, -69.7414094, -74.5268154, -79.1553229, -83.6269318, -87.9416422, -92.0994540, -96.1003672, -99.9443819, -103.6314980, -107.1617156, -110.5350346, -113.7514551, -116.8109770, -119.7136003, -122.4593251, -125.0481513, -127.4800790, -129.7551081, -131.8732386, -133.8344706, -135.6388040, -137.2862389, -138.7767752, -140.1104129, -141.2871521, -142.3069928, -143.1699348, -143.8759784, -144.4251233, -144.8173697, -145.0527175, -145.1311668, -145.0527175, -144.8173697, -144.4251233, -143.8759784, -143.1699348, -142.3069928, -141.2871521, -140.1104129, -138.7767752, -137.2862389, -135.6388040, -133.8344706, -131.8732386, -129.7551081, -127.4800790, -125.0481513, -122.4593251, -119.7136003, -116.8109770, -113.7514551, -110.5350346, -107.1617156, -103.6314980, -99.9443819, -96.1003672, -92.0994540, -87.9416422, -83.6269318, -79.1553229, -74.5268154, -69.7414094, -64.7991048, -59.6999016, -54.4437999, -49.0307996, -43.4609008, -37.7341034, -31.8504074, -25.8098129, -19.6123198, -13.2579282, -6.7466380, -0.0784493, 6.7466380, 13.7286239, 20.8675083, 28.1632913, 35.6159728, 43.2255529, 50.9920316, 58.9154088, 66.9956846, 75.2328589, 83.6269318, 92.1779033, 100.8857733, 109.7505418, 118.7722090, 127.9507746, 137.2862389, 146.7786017, 156.4278631, 166.2340230, 176.1970815, 186.3170385, 196.5938941, 207.0276482, 217.6183010, 228.3658522, 239.2703021, 250.3316505, 261.5498974, 272.9250429, 284.4570870, };
//    // SG_filt__sampRate_4k__nTaps_165
    std::vector<double> accelFiltCoefficients = { 209.8759764, 202.1975870, 194.6134110, 187.1234484, 179.7276991, 172.4261632, 165.2188406, 158.1057314, 151.0868356, 144.1621532, 137.3316841, 130.5954284, 123.9533860, 117.4055571, 110.9519414, 104.5925392, 98.3273503, 92.1563748, 86.0796127, 80.0970639, 74.2087285, 68.4146064, 62.7146977, 57.1090024, 51.5975205, 46.1802519, 40.8571967, 35.6283548, 30.4937263, 25.4533112, 20.5071095, 15.6551211, 10.8973461, 6.2337844, 1.6644361, -2.8106988, -7.1916203, -11.4783285, -15.6708233, -19.7691048, -23.7731728, -27.6830276, -31.4986689, -35.2200969, -38.8473115, -42.3803128, -45.8191006, -49.1636752, -52.4140363, -55.5701841, -58.6321185, -61.5998396, -64.4733472, -67.2526416, -69.9377225, -72.5285901, -75.0252443, -77.4276851, -79.7359126, -81.9499267, -84.0697275, -86.0953149, -88.0266889, -89.8638495, -91.6067968, -93.2555307, -94.8100513, -96.2703585, -97.6364523, -98.9083327, -100.0859998, -101.1694535, -102.1586939, -103.0537209, -103.8545345, -104.5611347, -105.1735216, -105.6916951, -106.1156553, -106.4454021, -106.6809355, -106.8222555, -106.8693622, -106.8222555, -106.6809355, -106.4454021, -106.1156553, -105.6916951, -105.1735216, -104.5611347, -103.8545345, -103.0537209, -102.1586939, -101.1694535, -100.0859998, -98.9083327, -97.6364523, -96.2703585, -94.8100513, -93.2555307, -91.6067968, -89.8638495, -88.0266889, -86.0953149, -84.0697275, -81.9499267, -79.7359126, -77.4276851, -75.0252443, -72.5285901, -69.9377225, -67.2526416, -64.4733472, -61.5998396, -58.6321185, -55.5701841, -52.4140363, -49.1636752, -45.8191006, -42.3803128, -38.8473115, -35.2200969, -31.4986689, -27.6830276, -23.7731728, -19.7691048, -15.6708233, -11.4783285, -7.1916203, -2.8106988, 1.6644361, 6.2337844, 10.8973461, 15.6551211, 20.5071095, 25.4533112, 30.4937263, 35.6283548, 40.8571967, 46.1802519, 51.5975205, 57.1090024, 62.7146977, 68.4146064, 74.2087285, 80.0970639, 86.0796127, 92.1563748, 98.3273503, 104.5925392, 110.9519414, 117.4055571, 123.9533860, 130.5954284, 137.3316841, 144.1621532, 151.0868356, 158.1057314, 165.2188406, 172.4261632, 179.7276991, 187.1234484, 194.6134110, 202.1975870, 209.8759764, };
//    // SG_filt__sampRate_4k__nTaps_189
//    std::vector<double> accelFiltCoefficients = { 139.9659708, 135.4989717, 131.0797480, 126.7082997, 122.3846269, 118.1087293, 113.8806072, 109.7002605, 105.5676892, 101.4828932, 97.4458727, 93.4566275, 89.5151578, 85.6214634, 81.7755444, 77.9774008, 74.2270326, 70.5244398, 66.8696224, 63.2625804, 59.7033137, 56.1918225, 52.7281066, 49.3121662, 45.9440011, 42.6236114, 39.3509971, 36.1261582, 32.9490947, 29.8198066, 26.7382939, 23.7045565, 20.7185946, 17.7804081, 14.8899969, 12.0473611, 9.2525007, 6.5054158, 3.8061062, 1.1545720, -1.4491869, -4.0051703, -6.5133783, -8.9738110, -11.3864682, -13.7513501, -16.0684565, -18.3377876, -20.5593433, -22.7331236, -24.8591285, -26.9373580, -28.9678121, -30.9504909, -32.8853942, -34.7725222, -36.6118747, -38.4034519, -40.1472536, -41.8432800, -43.4915310, -45.0920066, -46.6447068, -48.1496317, -49.6067811, -51.0161551, -52.3777538, -53.6915770, -54.9576249, -56.1758974, -57.3463944, -58.4691161, -59.5440624, -60.5712333, -61.5506289, -62.4822490, -63.3660937, -64.2021631, -64.9904570, -65.7309756, -66.4237188, -67.0686865, -67.6658789, -68.2152959, -68.7169375, -69.1708037, -69.5768946, -69.9352100, -70.2457500, -70.5085147, -70.7235039, -70.8907178, -71.0101563, -71.0818194, -71.1057071, -71.0818194, -71.0101563, -70.8907178, -70.7235039, -70.5085147, -70.2457500, -69.9352100, -69.5768946, -69.1708037, -68.7169375, -68.2152959, -67.6658789, -67.0686865, -66.4237188, -65.7309756, -64.9904570, -64.2021631, -63.3660937, -62.4822490, -61.5506289, -60.5712333, -59.5440624, -58.4691161, -57.3463944, -56.1758974, -54.9576249, -53.6915770, -52.3777538, -51.0161551, -49.6067811, -48.1496317, -46.6447068, -45.0920066, -43.4915310, -41.8432800, -40.1472536, -38.4034519, -36.6118747, -34.7725222, -32.8853942, -30.9504909, -28.9678121, -26.9373580, -24.8591285, -22.7331236, -20.5593433, -18.3377876, -16.0684565, -13.7513501, -11.3864682, -8.9738110, -6.5133783, -4.0051703, -1.4491869, 1.1545720, 3.8061062, 6.5054158, 9.2525007, 12.0473611, 14.8899969, 17.7804081, 20.7185946, 23.7045565, 26.7382939, 29.8198066, 32.9490947, 36.1261582, 39.3509971, 42.6236114, 45.9440011, 49.3121662, 52.7281066, 56.1918225, 59.7033137, 63.2625804, 66.8696224, 70.5244398, 74.2270326, 77.9774008, 81.7755444, 85.6214634, 89.5151578, 93.4566275, 97.4458727, 101.4828932, 105.5676892, 109.7002605, 113.8806072, 118.1087293, 122.3846269, 126.7082997, 131.0797480, 135.4989717, 139.9659708, };
//     SG_filt__sampRate_4k__nTaps_205
//    std::vector<double> accelFiltCoefficients = { 109.8195870, 106.5895992, 103.3914338, 100.2250911, 97.0905708, 93.9878731, 90.9169980, 87.8779454, 84.8707153, 81.8953078, 78.9517228, 76.0399603, 73.1600204, 70.3119031, 67.4956082, 64.7111360, 61.9584862, 59.2376590, 56.5486543, 53.8914722, 51.2661126, 48.6725756, 46.1108611, 43.5809691, 41.0828997, 38.6166528, 36.1822285, 33.7796267, 31.4088474, 29.0698907, 26.7627565, 24.4874449, 22.2439558, 20.0322892, 17.8524452, 15.7044237, 13.5882248, 11.5038484, 9.4512945, 7.4305632, 5.4416544, 3.4845682, 1.5593045, -0.3341367, -2.1957553, -4.0255514, -5.8235249, -7.5896759, -9.3240043, -11.0265103, -12.6971936, -14.3360545, -15.9430928, -17.5183085, -19.0617017, -20.5732724, -22.0530205, -23.5009461, -24.9170492, -26.3013297, -27.6537876, -28.9744231, -30.2632359, -31.5202263, -32.7453941, -33.9387394, -35.1002621, -36.2299623, -37.3278399, -38.3938950, -39.4281276, -40.4305376, -41.4011251, -42.3398900, -43.2468324, -44.1219523, -44.9652496, -45.7767244, -46.5563766, -47.3042063, -48.0202135, -48.7043981, -49.3567602, -49.9772997, -50.5660167, -51.1229112, -51.6479831, -52.1412325, -52.6026593, -53.0322636, -53.4300454, -53.7960046, -54.1301413, -54.4324554, -54.7029470, -54.9416160, -55.1484626, -55.3234865, -55.4666880, -55.5780669, -55.6576232, -55.7053570, -55.7212683, -55.7053570, -55.6576232, -55.5780669, -55.4666880, -55.3234865, -55.1484626, -54.9416160, -54.7029470, -54.4324554, -54.1301413, -53.7960046, -53.4300454, -53.0322636, -52.6026593, -52.1412325, -51.6479831, -51.1229112, -50.5660167, -49.9772997, -49.3567602, -48.7043981, -48.0202135, -47.3042063, -46.5563766, -45.7767244, -44.9652496, -44.1219523, -43.2468324, -42.3398900, -41.4011251, -40.4305376, -39.4281276, -38.3938950, -37.3278399, -36.2299623, -35.1002621, -33.9387394, -32.7453941, -31.5202263, -30.2632359, -28.9744231, -27.6537876, -26.3013297, -24.9170492, -23.5009461, -22.0530205, -20.5732724, -19.0617017, -17.5183085, -15.9430928, -14.3360545, -12.6971936, -11.0265103, -9.3240043, -7.5896759, -5.8235249, -4.0255514, -2.1957553, -0.3341367, 1.5593045, 3.4845682, 5.4416544, 7.4305632, 9.4512945, 11.5038484, 13.5882248, 15.7044237, 17.8524452, 20.0322892, 22.2439558, 24.4874449, 26.7627565, 29.0698907, 31.4088474, 33.7796267, 36.1822285, 38.6166528, 41.0828997, 43.5809691, 46.1108611, 48.6725756, 51.2661126, 53.8914722, 56.5486543, 59.2376590, 61.9584862, 64.7111360, 67.4956082, 70.3119031, 73.1600204, 76.0399603, 78.9517228, 81.8953078, 84.8707153, 87.8779454, 90.9169980, 93.9878731, 97.0905708, 100.2250911, 103.3914338, 106.5895992, 109.8195870, };



    // separate buffers to hold x,y.z position samples.  These are only used to calculate acceleration.
    cCircularBuffer posRigBufferX;
    cCircularBuffer posRigBufferY;
    cCircularBuffer posRigBufferZ;
    bool posBufferFilled;
    bool posBufferInit;


};

struct HapticWorkspace {
    // haptic environment variables
    cBoundingPlane* screenPlane;
    cMoveToPoint *moveToPoint; // used for moving the haptic to a specific point
    cPlanarObstacle *obstacle; // contains a single planar obstacle
    cPlanarObstacle *gapLeftObstacle; // contains the left gap obstacle
    cPlanarObstacle *gapRightObstacle;

    cPlanarObstacle* targets[HAPTIC_MAX_TARGETS]; // green viscous trapping target at reach endpoint
    unsigned nTargets;

    cPlanarObstacle* constraints[HAPTIC_MAX_CONSTRAINTS]; // green viscous trapping target at reach endpoint
    unsigned nConstraints;

    cConstrainToPoint *constrainToPoint; // keeps the haptic at a particular point
    cSupportLedge *holdSupport; // a wall that supports the haptic from below at a particular point
    cPerturbationPulse *perturbationPulse; // a pulse of force as perturbation
    cShapeLine *forceVector; // show the force in X/Y

    cDirectionalViscosity *failDrag;
    cDirectionalMass *directionalMass;

    cCurlForceField *curlForceField;
    cErrorClamp *errorClamp;
    cConstantForceField *constantForceField;
};

bool hapticIsCollidingWith(const cGenericObject*);
void hapticMoveToPoint(cVector3d);
void hapticMoveAbort();
void hapticCreateObstacle(std::vector<cVector3d>, bool);
void hapticCreateGap(bool, std::vector<cVector3d>, bool, std::vector<cVector3d>, bool);
void hapticClearObstacles();
void hapticCreateTarget(bool, bool, std::vector<cVector3d>);
void hapticClearTargets();
void hapticCreateConstraint(std::vector<cVector3d>);
void hapticClearConstraints();
void hapticConstrainToCurrentPoint();
void hapticConstrainAbort();
void hapticSupportAtPoint(cVector3d);
void hapticAbortSupportAtPoint();
void hapticTriggerPerturbationPulse(double, cVector3d);
void hapticInformDirectionalMassOfPerturbation(cVector3d force);
void hapticAbortPerturbation();
void hapticResume();
void hapticRetractHandle();
void hapticSetSimulatedMass(cVector3d simulatedMassVector, cVector3d simulatedDragVector);
void hapticPauseSimulatedMass();
void hapticResumeSimulatedMass();
void hapticSetDragActive();
void hapticSetDragInactive();
void hapticSetConstantForceField(double forceFieldMagnitude, double forceFieldDirection);
void hapticSetConstantForceFieldActive();
void hapticSetConstantForceFieldInactive();
void hapticSetCurlForceFieldActive(cVector3d, cVector3d);
void hapticSetCurlForceFieldInactive();
void hapticErrorClampActive(cVector3d wallPosition1, cVector3d wallPosition2, cVector3d wallOrient);
void hapticErrorClampInactive();

#endif // ifndef _HAPTIC_H_INCLUDED_
